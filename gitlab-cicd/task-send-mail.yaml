apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: send-mail
spec:
  params:
    - name: pipeinerun_name
    - name: git_project_name
    - name: git_http_url
    - name: ref
    - name: ci
    - name: cd
    - name: user_email
    - name: harbor_url

  steps:
    - name: send-mail
      image: harbor.arfa.wise-paas.com/lujin/pipeline-node:v-1.0.7
      script: |
        #!/usr/bin/env python3
        import smtplib
        from email.header import Header
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from retry import retry
        import subprocess


        @retry(Exception, tries=3, delay=1)
        def send_mail(receivers, subject, message, file):
            mail_user = "ensaas"
            mail_pass = ""
            sender = "wise-paas.com.cn"
            msg = MIMEText(message)
            m = MIMEMultipart()
            m.attach(msg)
            if file:
              textApart = MIMEText(open(file, 'rb').read(), 'base64', 'utf-8')
              textApart.add_header('Content-Disposition', 'attachment', filename=file)
              m.attach(textApart)
            m['From'] = Header(sender, 'utf-8')
            m['To'] = Header(receivers, 'utf-8')
            m['Subject'] = Header(subject, 'utf-8')
            try:
                smtp = smtplib.SMTP_SSL('smtp.mxhichina.com', 465, timeout=30)
                smtp.login(mail_user, mail_pass)
                smtp.sendmail(sender, receivers, m.as_string())
                smtp.quit()
                print("email sent successfully")
            except Exception as e:
                print("email sent failed with error: %s" % e)
                raise e

        def get_taskrun_status(task_name):
            p = subprocess.run("tkn pr describe %s |grep %s |awk '{print($8)}'" %(pipeinerun_name,task_name),shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            status = str(p.stdout, encoding = "utf-8").replace("\n", "")
            return status

        if __name__=="__main__":
            pipeinerun_name = "$(params.pipeinerun_name)"
            git_project_name = "$(params.git_project_name)"
            git_http_url = "$(params.git_http_url)"
            user_email = "$(params.user_email)"
            harbor_url = "$(params.harbor_url)"
            ref = "$(params.ref)"
            ci = "$(params.ci)"
            cd = "$(params.cd)"
            image_info = harbor_url + "/" + ci + ":" + ref.split("/")[2]
            chart_info = harbor_url + "/" + ci + ":" + ref.split("/")[3]

            get_params = get_taskrun_status("get-params")
            build_image  = get_taskrun_status("build-image ")
            push_chart = get_taskrun_status("push-chart")
            if get_params == "Succeeded" and build_image == "Succeeded" and push_chart == "Succeeded":
                subject = git_project_name +" CI/CD executed successfully"
                message = "%s\npipeinerun_name: %s\ngit_url: %s\nimage_info: %s\nchart_info: %s\ndeploy_info: %s" \
                          %(subject,pipeinerun_name,git_http_url,image_info,chart_info,cd)
                print("subject: %s\n%s" %(subject,message))
                send_mail(user_email, subject, message, "")
            else:
                pl = subprocess.run("tkn pr logs %s" %(pipeinerun_name),
                    shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                logs = str(pl.stdout, encoding = "utf-8")
                log_file = pipeinerun_name + ".log"
                with open(log_file,"w") as f:
                    f.write(logs)
                subject = git_project_name +" CI/CD execution failed"
                message = "%s. See attachment log for details\npipeinerun_name: %s\ngit_url: %s\nget-params: %s\nbuild-image: %s\npush-chart: %s" \
                          %(subject, pipeinerun_name,git_http_url,get_params,build_image,push_chart)
                print("subject: %s\n%s" %(subject,message))
                send_mail(user_email, subject, message, log_file)
            print("--------------- describe pipelinerun--------------")
            subprocess.run("tkn pr describe %s" %(pipeinerun_name),shell=True)
